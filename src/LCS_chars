fn LCS_chars(s: String, t: String) -> String {
    let svec = s.chars().collect::<Vec<char>>();
    let tvec = t.chars().collect::<Vec<char>>();
    let (slen, tlen) = (svec.len(), tvec.len());
    let mut dp = vec![vec![0; tlen+1]; slen+1];
    for i in 1..slen+1 {
        for j in 1..tlen+1 {
            if svec[i-1] == tvec[j-1] {
                dp[i][j] = dp[i-1][j-1]+1;
            } else {
                dp[i][j] = dp[i-1][j].max(dp[i][j-1]);
            }
        }
    }
    let (mut i, mut j) = (slen, tlen);
    let mut len = dp[slen][tlen];
    let mut ret = vec!['a'; len];
    while len > 0 {
        if svec[i-1] == tvec[j-1] {
            ret[len-1] = svec[i-1];
            i -= 1;
            j -= 1;
            len -= 1;
        } else if dp[i][j] == dp[i-1][j] {
            i -= 1;
        } else {
            j -= 1;
        }
    }
    return ret.iter().collect::<String>();
}
